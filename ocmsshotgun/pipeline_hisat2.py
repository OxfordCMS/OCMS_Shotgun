"""
================================
Align sequences with hisat2
================================


Overview
========

This pipeline is a wrapper for running hisat2. Accepts both paired end and 
single end reads


Configuration
=============
The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:
    
    ocms_shotgun hisat2 config

Dependencies
============

HISAT2
SAMtools
BEDtools

source /well/kir/config/modules.sh
module load HISAT2/2.2.1-gompi-2022b
module load BEDTools/2.30.0-GCC-12.2.0
module load SAMtools/1.17-GCC-12.2.0

Code
====

"""

from ruffus import *
from cgatcore import pipeline as P
from cgatcore import iotools as IOTools

import os,sys,re

import ocmsshotgun.modules.Utility as utility
import ocmsshotgun.modules.PreProcess as pp

# set up params
PARAMS = P.get_parameters(["pipeline.yml"])

# check that input files correspond
indir = PARAMS.get("input.dir", "input.dir")
paired = PARAMS.get("paired", "True")
FASTQ1S = utility.check_input(indir, paired=paired)

@follows(mkdir('hisat2.dir'))
@transform(FASTQ1S,
           regex(fr'{indir}/(\S+)(.fastq.*gz)'),
           r'hisat2.dir/\1_unmapped\2')
def runHisat2(infile, outfile): 
    '''Align sequences with HISAT2 and converts sam to bam
    '''

    tool = pp.hisat2(infile, outfile, **PARAMS)

    # build statement to run hisat2 and convert sam to bam
    statement = tool.hisat2bam()
    P.run(statement,
        job_threads = PARAMS["hisat2_job_threads"],
        job_memory = PARAMS["hisat2_job_memory"])
    
    # clean up sam files and hisat outputs
    statement = tool.postProcess()[0]
    P.run(statement, without_cluster=True)

@merge(runHisat2,
       "hisat2.dir/merged_hisat2_summary.tsv")
def mergeHisatSummary(infiles, outfile):
    # hisat summary logs
    logs = []
    for fq in infiles:
        fq_class = pp.utility.matchReference(fq, outfile, **PARAMS)
        log = fq.replace(f"_unmapped{fq_class.fq1_suffix}", "_hisat2_summary.log")
        logs.append(log)
    
    # merging done locally
    tool = pp.hisat2(infiles[0], outfile, **PARAMS)
    tool.mergeHisatSummary(logs, outfile)

@merge(runHisat2,
       "hisat2.dir/clean_up.log")
def cleanHisat(infiles, outfile):
    tool = pp.hisat2(infiles[0], outfile, **PARAMS)
    statement = tool.clean(outfile)
    P.run(statement, without_cluster=True)

@follows(mergeHisatSummary)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))  