"""
================================
Align and remove host sequences
================================


Overview
========

This pipeline is based on CGATMetaSequencing pipeline_filter

1) Checks input files 
2) Map host reads with HISAT2
3) Filter reads from bam files


Configuration
=============
The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:
    
    ocms_shotgun remove_host config

Dependencies
============

HISAT2
SAMtools
BEDtools

source /well/kir/config/modules.sh
module load HISAT2/2.2.1-gompi-2022b
module load BEDTools/2.30.0-GCC-12.2.0
module load SAMtools/1.17-GCC-12.2.0

Code
====

"""

from ruffus import *
from cgatcore import pipeline as P
from cgatcore import iotools as IOTools

import os,sys,re

import ocmsshotgun.modules.Utility as utility
import ocmsshotgun.modules.PreProcess as pp

# set up params
PARAMS = P.get_parameters(["pipeline.yml"])

# check that input files correspond
indir = PARAMS.get('general_input', 'input.dir')
FASTQ1S = utility.check_input(indir)

# forcing input.dir as input source because of filterMapping add_input.
# looking for a more flexible way of interacting with add_input
assert indir == 'input.dir', (
    "Input files need to be in input.dir."
)
################################################################################
# remove host sequences with bmtagger or hisat
################################################################################
@follows(mkdir('reads_hostRemoved.dir'))
@follows(removeRibosomalRNA)
@transform(removeRibosomalRNA,
           regex(r'reads_rrnaRemoved.dir/(\S+)_rRNAremoved.fastq.1.gz$'),
           r'reads_hostRemoved.dir/\1_dehost.fastq.1.gz')
def removeHost(infile,outfile): 
    '''Align and remove host sequences with bmtagger or HISAT2
    '''
    # bmtagger - aligns with srprism
    if PARAMS['host_tool']  == 'bmtagger':
        tool = pp.bmtagger(fastq1, outfile, **PARAMS)
        statements, tmpfiles = tool.buildStatement()

        # one statement for each host genome specified
        for statement in statements:
            P.run(statement, 
                job_threads=PARAMS['bmtagger_job_threads'], 
                job_memory=PARAMS['bmtagger_job_memory'],
                job_options=PARAMS.get('bmtagger_job_options',''))
        
        statement, to_unlink  = tool.postProcess(tmpfiles)
        P.run(statement)
        for f in to_unlink:
            os.unlink(f)
    #Align host sequences with HISAT2 and remove host reads with samtools
    #converts the output from sam to bam
    elif PARAMS['host_tool'] == 'hisat':
        tool = pp.hisat2(infile, outfile, **PARAMS)

        statement = [tool.hisatStatement()]
        
        # sort sam output to bam output and index bam
        statement.append(tool.sam2bamStatement())
        
        statement = " ; ".join(statement)
        P.run(statement,
            job_threads = PARAMS["hisat2_job_threads"],
            job_memory = PARAMS["hisat2_job_memory"])
        
        # clean up sam files and hisat outputs
        statement = tool.postProcess()
        P.run(statement, without_cluster=True)

        # merging done locally
        tool.mergeHisatMetrics() 

@follows(removeHost)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))    