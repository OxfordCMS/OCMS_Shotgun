import sys
import os
import re
import glob
from pathlib import Path
from ruffus import *
from cgatcore import pipeline as P
import ocmsshotgun.modules.Utility as utility

PARAMS = P.get_parameters(["pipeline.yml"])

FASTQ1 = utility.check_input()

SEQUENCEFILES = ("*.fastq.1.gz")

SEQUENCEFILES_REGEX = regex(
    r"(\S+).(fastq.1.gz)")

@follows(mkdir("metaphlan.dir"))
@transform(SEQUENCEFILES,
          SEQUENCEFILES_REGEX,
          r"metaphlan.dir/\1.metaphlan_relab.profile.txt")
def runMetaphlan(infile, outfile):
    read1 = infile
    read2 = infile.replace(".1.gz", ".2.gz")
    
    sample = os.path.basename(P.snip(infile, ".fastq.1.gz"))
    db_path = PARAMS["metaphlan_db"]  # Using the full path directly
    
    statement = (
        "metaphlan {read1},{read2}" 
        " --input_type fastq" 
        " --bowtie2db {db_path}"
        " --nproc {threads}"
        " --index {db_ver}"
        " --bowtie2out metaphlan.dir/{sample}.bowtie2.bz2"
        " --tax_lev {tax_lev}"
        " -t rel_ab_w_read_stats"
        " -o {outfile}"
    ).format(
        read1=read1,
        read2=read2,
        db_path=db_path,
        db_ver=PARAMS["metaphlan_database_version"],
        sample=sample,
        threads=PARAMS["metaphlan_threads"],
        tax_lev=PARAMS["metaphlan_tax_lev"],
        outfile=outfile
    )
    
    if PARAMS["metaphlan_options"]:
        statement += ' ' + PARAMS["metaphlan_options"]
               
    P.run(statement,
          job_threads=PARAMS["metaphlan_threads"],
          job_memory=PARAMS["metaphlan_memory"],
          job_options=PARAMS["metaphlan_cluster_options"])

@follows(runMetaphlan)
@merge(runMetaphlan, "metaphlan.dir/merged_abundance_table.txt")
def mergeMetaphlanTables(infiles, outfile):
    infiles_str = " ".join(infiles)
    
    statement = f"merge_metaphlan_tables.py {infiles_str} > {outfile}"
    
    P.run(statement)


@follows(mkdir("taxonomy_relab.dir"))
@transform(mergeMetaphlanTables,
          regex(r"metaphlan.dir/merged_abundance_table.txt"),
          [r"taxonomy_relab.dir/kingdom.txt",
           r"taxonomy_relab.dir/phylum.txt",
           r"taxonomy_relab.dir/class.txt",
           r"taxonomy_relab.dir/order.txt",
           r"taxonomy_relab.dir/family.txt",
           r"taxonomy_relab.dir/genus.txt",
           r"taxonomy_relab.dir/species.txt",
           r"taxonomy_relab.dir/strain.txt"])

def extractTaxonomyLevelsRelAb(infile, outfiles):
    levels = ['k__', 'p__', 'c__', 'o__', 'f__', 'g__', 's__', 't__']

    for level, outfile in zip(levels, outfiles):
        statement = (
            f'(echo -e "$(head -n 2 {infile} | tail -n 1 | sed \'s/^clade_name/taxon/\')" && '
            f'grep "{level}" {infile}) > {outfile}'
        )
        P.run(statement)


@follows(mkdir("metaphlan_counts.dir"))
@merge(runMetaphlan, "metaphlan_counts.dir/merged_metaphlan_counts.txt.gz")
def mergeMetaphlanCounts(outfile):
    '''
    Merge raw count files from MetaPhlAn profiles generated by HUMAnN3 (or standalone MetaPhlAn).
    '''
    infiles = sorted(glob.glob("metaphlan.dir/*.metaphlan_relab.profile.txt"))
    headers = [P.snip(os.path.basename(x), ".metaphlan_relab.profile.txt") for x in infiles]
    headers_str = ",".join(headers)

    statement = f'''
        ocms_shotgun combine_tables
            --glob=metaphlan.dir/*.metaphlan_relab.profile.txt
            --skip-titles
            --header-names="{headers_str}"
            -m 0
            -k 5
            -c 1
            --log=metaphlan_counts.dir/merged_metaphlan_counts.log
            | gzip > {outfile}
    '''

    P.run(statement)

@follows(mergeMetaphlanCounts, mkdir("taxonomy_counts.dir"))
@transform("metaphlan_counts.dir/merged_metaphlan_counts.txt.gz",
           regex(r"metaphlan_counts.dir/merged_metaphlan_counts.txt.gz"),
           [r"taxonomy_counts.dir/kingdom.txt",
            r"taxonomy_counts.dir/phylum.txt",
            r"taxonomy_counts.dir/class.txt",
            r"taxonomy_counts.dir/order.txt",
            r"taxonomy_counts.dir/family.txt",
            r"taxonomy_counts.dir/genus.txt",
            r"taxonomy_counts.dir/species.txt",
            r"taxonomy_counts.dir/strain.txt"])
def extractTaxonomyLevelsCounts(infile, outfiles):
    levels = ['k__', 'p__', 'c__', 'o__', 'f__', 'g__', 's__', 't__']

    for level, outfile in zip(levels, outfiles):
        statement = (
            f'(echo -e "$(zcat {infile} | head -n 1 | sed \'s/^clade_name/taxon/\')" && '
            f'zcat {infile} | grep "{level}") > {outfile}'
        )
        P.run(statement)


@follows(extractTaxonomyLevelsRelAb, mergeMetaphlanCounts, extractTaxonomyLevelsCounts)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
